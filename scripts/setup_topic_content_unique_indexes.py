#!/usr/bin/env python3
"""
Script para configurar √≠ndices √∫nicos en la colecci√≥n topic_contents.
Garantiza integridad de datos para slides y quizzes en el sistema de contenido de temas.

Ejecutar despu√©s de implementar Fase 3 (upsert idempotente) para reforzar la integridad
a nivel de base de datos.
"""

import sys
import os
import logging
import argparse
from typing import Tuple, Dict, List
from pymongo import ASCENDING
from pymongo.errors import OperationFailure, PyMongoError
from bson import ObjectId

# Agregar path para importar m√≥dulos del proyecto
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.shared.database import get_db

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

def check_for_duplicates() -> Tuple[bool, Dict]:
    """
    Verifica si existen duplicados que impedir√≠an crear √≠ndices √∫nicos.
    
    Returns:
        Tuple[bool, Dict]: (puede_continuar, reporte_duplicados)
    """
    db = get_db()
    collection = db.topic_contents
    
    reporte = {
        "slides_duplicados": [],
        "quizzes_duplicados": []
    }
    
    print("üîç Verificando duplicados existentes...")
    print("=" * 60)
    
    # Verificar slides duplicados
    try:
        pipeline_slides = [
            {"$match": {"content_type": "slide"}},
            {"$group": {
                "_id": {"topic_id": "$topic_id", "order": "$order"},
                "count": {"$sum": 1},
                "ids": {"$push": "$_id"}
            }},
            {"$match": {"count": {"$gt": 1}}}
        ]

        slides_duplicados = list(collection.aggregate(pipeline_slides))
        if slides_duplicados:
            print(f"‚ö†Ô∏è  Encontrados {len(slides_duplicados)} grupos de slides duplicados:")
            for dup in slides_duplicados:
                ids = dup["ids"]
                print(f"   - Topic: {dup['_id']['topic_id']}, Order: {dup['_id']['order']}, Count: {dup['count']}, IDs: {ids}")
                reporte["slides_duplicados"].append({
                    "topic_id": dup["_id"]["topic_id"],
                    "content_type": "slide",  # Siempre es slide debido al filtro
                    "order": dup["_id"]["order"],
                    "count": dup["count"],
                    "ids": ids
                })
        else:
            print("‚úÖ No se encontraron slides duplicados")
            
    except PyMongoError as e:
        logger.error(f"Error verificando slides duplicados: {str(e)}")
        return False, reporte
    
    # Verificar quizzes duplicados
    try:
        pipeline_quizzes = [
            {"$match": {"content_type": "quiz"}},
            {"$group": {
                "_id": "$topic_id",
                "count": {"$sum": 1},
                "ids": {"$push": "$_id"}
            }},
            {"$match": {"count": {"$gt": 1}}}
        ]
        
        quizzes_duplicados = list(collection.aggregate(pipeline_quizzes))
        if quizzes_duplicados:
            print(f"‚ö†Ô∏è  Encontrados {len(quizzes_duplicados)} topics con m√∫ltiples quizzes:")
            for dup in quizzes_duplicados:
                ids = dup["ids"]
                print(f"   - Topic: {dup['_id']}, Count: {dup['count']}, IDs: {ids}")
                reporte["quizzes_duplicados"].append({
                    "topic_id": dup["_id"],
                    "count": dup["count"],
                    "ids": ids
                })
        else:
            print("‚úÖ No se encontraron quizzes duplicados")
            
    except PyMongoError as e:
        logger.error(f"Error verificando quizzes duplicados: {str(e)}")
        return False, reporte
    
    puede_continuar = len(reporte["slides_duplicados"]) == 0 and len(reporte["quizzes_duplicados"]) == 0
    
    if not puede_continuar:
        print("\n‚ö†Ô∏è  ADVERTENCIA: Se encontraron duplicados existentes.")
        print("   La creaci√≥n de √≠ndices √∫nicos fallar√° si no se limpian primero.")
        print("   Recomendaci√≥n: Ejecutar script de limpieza antes de crear √≠ndices.")
    
    return puede_continuar, reporte

def create_topic_content_unique_indexes(drop_existing: bool = False) -> int:
    """
    Crea los √≠ndices √∫nicos para topic_contents.
    
    Args:
        drop_existing: Si True, elimina √≠ndices existentes antes de crear
        
    Returns:
        int: N√∫mero de √≠ndices creados exitosamente
    """
    db = get_db()
    collection = db.topic_contents
    indexes_created = 0
    
    print("\nüöÄ Creando √≠ndices √∫nicos...")
    print("=" * 60)
    
    # √çndice 1: Slides √∫nicos por (topic_id, content_type, order)
    try:
        # Preservar √≠ndice general idx_topic_content_type_order para queries no-slide
        # Solo eliminar si hay un hard conflict (√≠ndice √∫nico con mismo nombre y claves)
        try:
            existing_indexes = collection.list_indexes()
            for index in existing_indexes:
                if index.get("name") == "idx_topic_content_type_order":
                    index_keys = dict(index.get("key", {}))
                    expected_keys = {"topic_id": 1, "content_type": 1, "order": 1}
                    if index_keys == expected_keys and index.get("unique", False):
                        print("   - Detectado √≠ndice √∫nico con nombre 'idx_topic_content_type_order'")
                        print("   - Eliminando √≠ndice √∫nico conflictivo para preservar √≠ndice general")
                        collection.drop_index("idx_topic_content_type_order")
                        print("   - ‚úÖ √çndice √∫nico conflictivo eliminado")

                        # Crear √≠ndice general no-√∫nico para reemplazarlo
                        collection.create_index(
                            [("topic_id", ASCENDING), ("content_type", ASCENDING), ("order", ASCENDING)],
                            name="idx_topic_content_type_order",
                            unique=False,
                            background=True
                        )
                        print("   - ‚úÖ √çndice general no-√∫nico recreado para queries no-slide")
                        break
        except Exception as e:
            print(f"   - ‚ö†Ô∏è  No se pudo verificar √≠ndices existentes: {str(e)}")

        # Asegurar que el √≠ndice general exista para √≥ptimo rendimiento de queries no-slide
        try:
            existing_indexes = collection.list_indexes()
            general_index_exists = False
            general_index_valid = False

            # Verificar si existe y validar su definici√≥n seg√∫n los requisitos del comentario
            for idx in existing_indexes:
                if idx.get("name") == "idx_topic_content_type_order":
                    general_index_exists = True

                    # Validar definici√≥n del √≠ndice seg√∫n los requisitos del comentario
                    index_keys = dict(idx.get("key", {}))
                    expected_keys = {"topic_id": 1, "content_type": 1, "order": 1}
                    is_unique = idx.get("unique", False)
                    has_partial_filter = "partialFilterExpression" in idx

                    # Validar que cumpla con todos los requisitos: key, unique=False, sin partialFilterExpression
                    if (index_keys == expected_keys and
                        not is_unique and
                        not has_partial_filter):
                        general_index_valid = True
                        print("   - ‚úÖ √çndice general idx_topic_content_type_order ya existe con definici√≥n correcta (preservado para performance)")
                    else:
                        print(f"   - ‚ö†Ô∏è  √çndice general idx_topic_content_type_order existe con definici√≥n incorrecta:")
                        print(f"      - Keys esperadas: {expected_keys}, encontradas: {index_keys}")
                        print(f"      - Unique esperado: False, encontrado: {is_unique}")
                        print(f"      - PartialFilterExpression esperado: None, encontrado: {idx.get('partialFilterExpression', 'None')}")

                        # Eliminar y recrear con definici√≥n correcta en ese mismo bloque
                        try:
                            collection.drop_index("idx_topic_content_type_order")
                            print("   -   √çndice incorrecto eliminado")

                            collection.create_index(
                                [("topic_id", ASCENDING), ("content_type", ASCENDING), ("order", ASCENDING)],
                                name="idx_topic_content_type_order",
                                unique=False,
                                background=True
                            )
                            print("   - ‚úÖ √çndice general recreado con definici√≥n correcta para queries no-slide")
                            general_index_valid = True
                        except Exception as recreate_error:
                            print(f"   - ‚ùå Error recreando √≠ndice: {str(recreate_error)}")

                    break

            if not general_index_exists:
                collection.create_index(
                    [("topic_id", ASCENDING), ("content_type", ASCENDING), ("order", ASCENDING)],
                    name="idx_topic_content_type_order",
                    unique=False,
                    background=True
                )
                print("   - ‚úÖ √çndice general no-√∫nico creado para queries no-slide")
                general_index_valid = True

        except Exception as e:
            print(f"   - ‚ö†Ô∏è  No se pudo asegurar √≠ndice general: {str(e)}")


        # Verificar si existe un √≠ndice con el mismo nombre pero diferente definici√≥n
        try:
            existing_indexes = collection.list_indexes()
            conflicting_index_found = False

            for index in existing_indexes:
                if index.get("name") == "idx_unique_slide_topic_order":
                    # Comparar definici√≥n con la esperada
                    index_keys = dict(index.get("key", {}))
                    expected_keys = {"topic_id": 1, "order": 1}
                    expected_unique = True
                    expected_partial_filter = {"content_type": "slide"}

                    actual_unique = index.get("unique", False)
                    actual_partial_filter = index.get("partialFilterExpression")

                    # Verificar si hay diferencias en clave, unique o partialFilterExpression
                    keys_match = index_keys == expected_keys
                    unique_match = actual_unique == expected_unique
                    partial_match = actual_partial_filter == expected_partial_filter

                    if not (keys_match and unique_match and partial_match):
                        # Hay conflicto - el √≠ndice existe con diferente definici√≥n
                        print("   - ‚ö†Ô∏è  Detectado √≠ndice con mismo nombre pero diferente definici√≥n:")
                        print(f"     ‚Ä¢ Nombre: idx_unique_slide_topic_order")
                        print(f"     ‚Ä¢ Keys: {index_keys} (esperado: {expected_keys}) - {'‚úÖ' if keys_match else '‚ùå'}")
                        print(f"     ‚Ä¢ Unique: {actual_unique} (esperado: {expected_unique}) - {'‚úÖ' if unique_match else '‚ùå'}")
                        print(f"     ‚Ä¢ Partial Filter: {actual_partial_filter} (esperado: {expected_partial_filter}) - {'‚úÖ' if partial_match else '‚ùå'}")

                        if drop_existing:
                            print("   - üóëÔ∏è  Eliminando √≠ndice conflictivo (--drop-existing)")
                            try:
                                collection.drop_index("idx_unique_slide_topic_order")
                                print("   - ‚úÖ √çndice conflictivo eliminado exitosamente")
                                conflicting_index_found = True
                            except OperationFailure as e:
                                print(f"   - ‚ùå Error eliminando √≠ndice conflictivo: {str(e)}")
                                raise
                        else:
                            print("   - ‚ùå Conflicto detectado. Use --drop-existing para recrear el √≠ndice con la definici√≥n correcta")
                            raise OperationFailure("Index already exists with different options", 85)  # MongoDB code 85 for IndexOptionsConflict

                    else:
                        print("   - ‚úÖ √çndice idx_unique_slide_topic_order ya existe con definici√≥n correcta")
                        indexes_created += 1  # Contar como ya existente
                        conflicting_index_found = True

                    break

        except OperationFailure as e:
            if "already exists with different options" in str(e):
                print(f"‚ùå Error de conflicto de √≠ndice: {str(e)}")
                print("   - Soluci√≥n: Use --drop-existing para eliminar y recrear el √≠ndice")
                sys.exit(1)
            else:
                raise

        # Si no hay conflicto o el √≠ndice no existe, crearlo
        if not conflicting_index_found or drop_existing:
            if drop_existing:
                # Eliminar cualquier √≠ndice con las mismas claves sin filtro, EXCEPTO el √≠ndice general
                try:
                    indexes = list(collection.list_indexes())
                    for index in indexes:
                        if (dict(index.get('key', {})) == {'topic_id': 1, 'order': 1} and
                            not index.get("partialFilterExpression") and
                            index.get("name") != "idx_topic_content_type_order"):
                            collection.drop_index(index["name"])
                            print(f"   - Eliminado √≠ndice sin filtro (excepto √≠ndice general): {index['name']}")
                            break
                except OperationFailure:
                    # No matching index found, which is fine
                    pass

                collection.create_index(
                [("topic_id", ASCENDING), ("order", ASCENDING)],
                name="idx_unique_slide_topic_order",
                unique=True,
                partialFilterExpression={"content_type": "slide"},
                background=True
            )
        print("‚úÖ √çndice √∫nico parcial creado: idx_unique_slide_topic_order")
        print("   - Keys: (topic_id, order)")
        print("   - Unique: True")
        print("   - Partial: content_type='slide'")
        print("   - Background: True")
        indexes_created += 1
        
    except Exception as e:
        error_msg = str(e)
        if "11000" in error_msg or "duplicate key" in error_msg.lower():
            print("‚ùå Error: √çndice √∫nico parcial no se puede crear debido a duplicados existentes")
            print("   - Limpie duplicados primero o use --force si ya los limpi√≥")
        else:
            print(f"‚ùå Error creando √≠ndice √∫nico de slides: {error_msg}")
    
    # √çndice 2: Quiz √∫nico por topic (parcial)
    try:
        # Verificar si existe un √≠ndice con el mismo nombre pero diferente definici√≥n para quiz
        try:
            existing_indexes = collection.list_indexes()
            conflicting_quiz_index_found = False

            for index in existing_indexes:
                if index.get("name") == "idx_unique_quiz_per_topic":
                    # Comparar definici√≥n con la esperada
                    index_keys = dict(index.get("key", {}))
                    expected_keys = {"topic_id": 1}
                    expected_unique = True
                    expected_partial_filter = {"content_type": "quiz"}

                    actual_unique = index.get("unique", False)
                    actual_partial_filter = index.get("partialFilterExpression")

                    # Verificar si hay diferencias en clave, unique o partialFilterExpression
                    keys_match = index_keys == expected_keys
                    unique_match = actual_unique == expected_unique
                    partial_match = actual_partial_filter == expected_partial_filter

                    if not (keys_match and unique_match and partial_match):
                        # Hay conflicto - el √≠ndice existe con diferente definici√≥n
                        print("   - ‚ö†Ô∏è  Detectado √≠ndice quiz con mismo nombre pero diferente definici√≥n:")
                        print(f"     ‚Ä¢ Nombre: idx_unique_quiz_per_topic")
                        print(f"     ‚Ä¢ Keys: {index_keys} (esperado: {expected_keys}) - {'‚úÖ' if keys_match else '‚ùå'}")
                        print(f"     ‚Ä¢ Unique: {actual_unique} (esperado: {expected_unique}) - {'‚úÖ' if unique_match else '‚ùå'}")
                        print(f"     ‚Ä¢ Partial Filter: {actual_partial_filter} (esperado: {expected_partial_filter}) - {'‚úÖ' if partial_match else '‚ùå'}")

                        if drop_existing:
                            print("   - üóëÔ∏è  Eliminando √≠ndice quiz conflictivo (--drop-existing)")
                            try:
                                collection.drop_index("idx_unique_quiz_per_topic")
                                print("   - ‚úÖ √çndice quiz conflictivo eliminado exitosamente")
                                conflicting_quiz_index_found = True
                            except OperationFailure as e:
                                print(f"   - ‚ùå Error eliminando √≠ndice quiz conflictivo: {str(e)}")
                                raise
                        else:
                            print("   - ‚ùå Conflicto detectado en √≠ndice quiz. Use --drop-existing para recrear el √≠ndice con la definici√≥n correcta")
                            raise OperationFailure("Index already exists with different options", 85)  # MongoDB code 85 for IndexOptionsConflict

                    else:
                        print("   - ‚úÖ √çndice idx_unique_quiz_per_topic ya existe con definici√≥n correcta")
                        indexes_created += 1  # Contar como ya existente
                        conflicting_quiz_index_found = True

                    break

        except OperationFailure as e:
            if "already exists with different options" in str(e):
                print(f"‚ùå Error de conflicto de √≠ndice quiz: {str(e)}")
                print("   - Soluci√≥n: Use --drop-existing para eliminar y recrear el √≠ndice quiz")
                sys.exit(1)
            else:
                raise

        # Si no hay conflicto o el √≠ndice no existe, crearlo
        if not conflicting_quiz_index_found or drop_existing:
            if drop_existing:
                try:
                    collection.drop_index("idx_unique_quiz_per_topic")
                    print("   - Eliminado √≠ndice existente 'idx_unique_quiz_per_topic'")
                except OperationFailure:
                    # Index doesn't exist, which is fine
                    pass

            collection.create_index(
                [("topic_id", ASCENDING)],
                name="idx_unique_quiz_per_topic",
                unique=True,
                partialFilterExpression={"content_type": "quiz"},
                background=True
            )
        print("‚úÖ √çndice √∫nico parcial creado: idx_unique_quiz_per_topic")
        print("   - Keys: (topic_id)")
        print("   - Unique: True")
        print("   - Partial: content_type='quiz'")
        print("   - Background: True")
        indexes_created += 1
        
    except Exception as e:
        error_msg = str(e)
        if "11000" in error_msg or "duplicate key" in error_msg.lower():
            print("‚ùå Error: √çndice √∫nico parcial no se puede crear debido a quizzes duplicados")
            print("   - Limpie duplicados primero o use --force si ya los limpi√≥")
        else:
            print(f"‚ùå Error creando √≠ndice √∫nico parcial de quizzes: {error_msg}")
    
    return indexes_created

def verify_unique_indexes() -> bool:
    """
    Verifica que los √≠ndices √∫nicos se crearon correctamente.
    
    Returns:
        bool: True si ambos √≠ndices existen y son correctos
    """
    db = get_db()
    collection = db.topic_contents
    
    print("\nüîç Verificando √≠ndices creados...")
    print("=" * 60)
    
    try:
        indexes = list(collection.list_indexes())
        print(f"üìã topic_contents: {len(indexes)} √≠ndices totales")
        
        idx_slides_found = False
        idx_quiz_found = False
        idx_general_found = False

        for index in indexes:
            name = index.get("name", "")
            is_new = name in ["idx_unique_slide_topic_order", "idx_unique_quiz_per_topic"]
            marker = "‚úÖ NUEVO" if is_new else ""

            print(f"   - {name} {marker}")

            if name == "idx_unique_slide_topic_order":
                # Verificar propiedades
                if (index.get("unique") and
                    dict(index.get("key")) == {"topic_id": 1, "order": 1} and
                    index.get("partialFilterExpression") == {"content_type": "slide"}):
                    print("     ‚úì Propiedades correctas (√∫nico parcial, keys correctas)")
                    idx_slides_found = True
                else:
                    print("     ‚ö†Ô∏è  Propiedades incorrectas")

            elif name == "idx_unique_quiz_per_topic":
                # Verificar propiedades
                if (index.get("unique") and
                    dict(index.get("key")) == {"topic_id": 1} and
                    index.get("partialFilterExpression") == {"content_type": "quiz"}):
                    print("     ‚úì Propiedades correctas (√∫nico parcial, keys correctas)")
                    idx_quiz_found = True
                else:
                    print("     ‚ö†Ô∏è  Propiedades incorrectas")

            elif name == "idx_topic_content_type_order":
                # Verificar propiedades del √≠ndice general (preservado para performance)
                if (not index.get("unique", False) and
                    dict(index.get("key")) == {"topic_id": 1, "content_type": 1, "order": 1} and
                    not index.get("partialFilterExpression")):
                    print("     ‚úì Propiedades correctas (general no-√∫nico, preservado para performance)")
                    idx_general_found = True
                else:
                    print("     ‚ö†Ô∏è  Propiedades incorrectas en √≠ndice general")

        # √âxito si los dos √≠ndices √∫nicos est√°n correctos (el general es opcional)
        unique_indexes_success = idx_slides_found and idx_quiz_found

        if unique_indexes_success:
            print("\n‚úÖ Verificaci√≥n exitosa: √çndices √∫nicos correctamente configurados")
            print("   - √çndice √∫nico parcial para slides: idx_unique_slide_topic_order")
            print("   - √çndice √∫nico parcial para quizzes: idx_unique_quiz_per_topic")

            # Verificar √≠ndice general como advertencia (opcional)
            if idx_general_found:
                print("   - √çndice general para performance: idx_topic_content_type_order ‚úÖ")
            else:
                print("   - ‚ö†Ô∏è  ADVERTENCIA: √çndice general para performance (idx_topic_content_type_order) no encontrado")
                print("     ‚Ä¢ Este √≠ndice optimiza consultas no-slide pero es opcional para la funcionalidad")
                print("     ‚Ä¢ Para crearlo manualmente: use setup_database_indexes() o el script de √≠ndices generales")
        else:
            print("\n‚ùå Verificaci√≥n fallida: √çndices √∫nicos no est√°n correctamente configurados")
            missing = []
            if not idx_slides_found:
                missing.append("√≠ndice √∫nico para slides")
            if not idx_quiz_found:
                missing.append("√≠ndice √∫nico para quizzes")
            print(f"   Faltante(s): {', '.join(missing)}")

        return unique_indexes_success
        
    except Exception as e:
        print(f"‚ùå Error verificando √≠ndices: {str(e)}")
        return False

def test_index_constraints() -> Tuple[bool, List[str]]:
    """
    Prueba que los √≠ndices √∫nicos realmente previenen duplicados.
    
    Returns:
        Tuple[bool, List[str]]: (todos_pasaron, mensajes_de_prueba)
    """
    db = get_db()
    collection = db.topic_contents
    
    print("\nüß™ Probando constraints de √≠ndices √∫nicos...")
    print("=" * 60)
    
    mensajes = []
    todos_pasaron = True
    
    # Generar IDs de prueba que no existan
    test_topic_id = ObjectId()
    test_slide_id = ObjectId()
    test_quiz_id = ObjectId()
    
    # Test 1: Slides duplicados
    try:
        # Insertar slide de prueba
        slide_doc = {
            "_id": test_slide_id,
            "topic_id": test_topic_id,
            "content_type": "slide",
            "order": 1,
            "title": "Test Slide",
            "content": {"text": "Test content"},
            "status": "active",
            "created_at": "2024-01-01T00:00:00Z",
            "updated_at": "2024-01-01T00:00:00Z"
        }
        
        collection.insert_one(slide_doc)
        
        # Intentar insertar duplicado
        duplicate_slide = slide_doc.copy()
        duplicate_slide["_id"] = ObjectId()
        
        try:
            collection.insert_one(duplicate_slide)
            print("‚ùå Test 1 FALL√ì: Se permiti√≥ insertar slide duplicado")
            mensajes.append("Test 1: FALL√ì - Slide duplicado permitido")
            todos_pasaron = False
        except Exception as e:
            if "11000" in str(e) or "duplicate key" in str(e).lower():
                print("‚úÖ Test 1: √çndice previene slides duplicados correctamente")
                mensajes.append("Test 1: PAS√ì - Slide duplicado rechazado")
            else:
                print(f"‚ùå Test 1 FALL√ì: Error inesperado: {str(e)}")
                mensajes.append(f"Test 1: FALL√ì - Error inesperado: {str(e)}")
                todos_pasaron = False
        
        # Limpiar
        collection.delete_one({"_id": test_slide_id})
        
    except Exception as e:
        print(f"‚ùå Error en test de slides: {str(e)}")
        mensajes.append(f"Test 1: ERROR - {str(e)}")
        todos_pasaron = False
    
    # Test 2: Quizzes duplicados
    try:
        # Insertar quiz de prueba
        quiz_doc = {
            "_id": test_quiz_id,
            "topic_id": test_topic_id,
            "content_type": "quiz",
            "order": 1,
            "title": "Test Quiz",
            "content": {"questions": []},
            "status": "active",
            "created_at": "2024-01-01T00:00:00Z",
            "updated_at": "2024-01-01T00:00:00Z"
        }
        
        collection.insert_one(quiz_doc)
        
        # Intentar insertar segundo quiz para mismo topic
        duplicate_quiz = quiz_doc.copy()
        duplicate_quiz["_id"] = ObjectId()
        
        try:
            collection.insert_one(duplicate_quiz)
            print("‚ùå Test 2 FALL√ì: Se permiti√≥ insertar segundo quiz para mismo topic")
            mensajes.append("Test 2: FALL√ì - Segundo quiz permitido")
            todos_pasaron = False
        except Exception as e:
            if "11000" in str(e) or "duplicate key" in str(e).lower():
                print("‚úÖ Test 2: √çndice previene m√∫ltiples quizzes por topic correctamente")
                mensajes.append("Test 2: PAS√ì - Segundo quiz rechazado")
            else:
                print(f"‚ùå Test 2 FALL√ì: Error inesperado: {str(e)}")
                mensajes.append(f"Test 2: FALL√ì - Error inesperado: {str(e)}")
                todos_pasaron = False
        
        # Limpiar
        collection.delete_one({"_id": test_quiz_id})
        
    except Exception as e:
        print(f"‚ùå Error en test de quizzes: {str(e)}")
        mensajes.append(f"Test 2: ERROR - {str(e)}")
        todos_pasaron = False

    # Test 3: Upsert idempotencia
    try:
        # Insertar slide inicial con upsert
        result = collection.update_one(
            {"topic_id": test_topic_id, "content_type": "slide", "order": 1},
            {"$set": {
                "title": "Test Slide Original",
                "content": {"text": "Test content original"},
                "status": "active",
                "created_at": "2024-01-01T00:00:00Z",
                "updated_at": "2024-01-01T00:00:00Z"
            }},
            upsert=True
        )

        # Verificar que se insert√≥ un documento
        count_after_first = collection.count_documents({"topic_id": test_topic_id, "content_type": "slide", "order": 1})

        if count_after_first != 1:
            print(f"‚ùå Test 3 FALL√ì: Se esperaba 1 documento despu√©s del primer upsert, se encontraron {count_after_first}")
            mensajes.append(f"Test 3: FALL√ì - Conteo incorrecto despu√©s del primer upsert: {count_after_first}")
            todos_pasaron = False
        else:
            # Ejecutar segundo upsert con mismo filtro pero diferente contenido
            result = collection.update_one(
                {"topic_id": test_topic_id, "content_type": "slide", "order": 1},
                {"$set": {
                    "title": "Test Slide Actualizado",
                    "content": {"text": "Test content actualizado"},
                    "status": "active",
                    "updated_at": "2024-01-02T00:00:00Z"
                }},
                upsert=True
            )

            # Verificar idempotencia: a√∫n debe haber solo 1 documento
            count_after_second = collection.count_documents({"topic_id": test_topic_id, "content_type": "slide", "order": 1})

            if count_after_second != 1:
                print(f"‚ùå Test 3 FALL√ì: Se esperaba 1 documento despu√©s del segundo upsert, se encontraron {count_after_second}")
                mensajes.append(f"Test 3: FALL√ì - Idempotencia fallida, conteo: {count_after_second}")
                todos_pasaron = False
            else:
                # Verificar que el documento se actualiz√≥
                doc_actualizado = collection.find_one({"topic_id": test_topic_id, "content_type": "slide", "order": 1})
                if doc_actualizado and doc_actualizado.get("title") == "Test Slide Actualizado":
                    print("‚úÖ Test 3: Upsert idempotente funciona correctamente")
                    mensajes.append("Test 3: PAS√ì - Upsert idempotente verificado")
                else:
                    print("‚ùå Test 3 FALL√ì: El documento no se actualiz√≥ correctamente")
                    mensajes.append("Test 3: FALL√ì - El documento no se actualiz√≥")
                    todos_pasaron = False

        # Limpiar documentos creados
        collection.delete_many({"topic_id": test_topic_id})

    except Exception as e:
        print(f"‚ùå Error en test de upsert idempotencia: {str(e)}")
        mensajes.append(f"Test 3: ERROR - {str(e)}")
        todos_pasaron = False

    return todos_pasaron, mensajes

def validate_index_usage_with_explain() -> bool:
    """
    Valida que el query planner utilice el √≠ndice optimizado para queries t√≠picos.

    Returns:
        bool: True si el planner usa el √≠ndice correcto
    """
    db = get_db()
    collection = db.topic_contents

    print("\nüîç Validando uso de √≠ndices con explain()...")
    print("=" * 60)

    try:
        # Crear documento de prueba para ensure explain tiene datos sobre los que trabajar
        test_topic_id = ObjectId()
        test_slide = {
            "_id": ObjectId(),
            "topic_id": test_topic_id,
            "content_type": "slide",
            "order": 1,
            "title": "Test Slide para explain",
            "content": {"text": "Test content"},
            "status": "active",
            "created_at": "2024-01-01T00:00:00Z",
            "updated_at": "2024-01-01T00:00:00Z"
        }

        collection.insert_one(test_slide)

        # Query t√≠pico utilizado por la aplicaci√≥n
        typical_query = {
            "topic_id": test_topic_id,
            "content_type": "slide",
            "order": 1
        }

        # Ejecutar explain
        explain_result = collection.find(typical_query).explain("executionStats")

        # Extraer informaci√≥n del winningPlan
        winning_plan = explain_result.get("queryPlanner", {}).get("winningPlan", {})
        input_stage = winning_plan

        # Navegar por los stages hasta encontrar el √≠ndice usado
        index_used = None
        while input_stage:
            if "indexName" in input_stage:
                index_used = input_stage["indexName"]
                break
            input_stage = input_stage.get("inputStage")

        # Limpiar documento de prueba
        collection.delete_one({"_id": test_slide["_id"]})

        if index_used == "idx_unique_slide_topic_order":
            print("‚úÖ Query planner est√° usando el √≠ndice optimizado idx_unique_slide_topic_order")
            print("   - El √≠ndice parcial se utiliza eficientemente para queries con content_type='slide'")
            return True
        elif index_used:
            print(f"‚ö†Ô∏è  Query planner est√° usando un √≠ndice diferente: {index_used}")
            print("   - El √≠ndice optimizado podr√≠a no estar siendo utilizado")
            return False
        else:
            print("‚ö†Ô∏è  Query planner no est√° usando ning√∫n √≠ndice (COLLSCAN)")
            print("   - Considerar revisar la configuraci√≥n del √≠ndice")
            return False

    except Exception as e:
        print(f"‚ùå Error validando uso de √≠ndices: {str(e)}")
        return False

def main():
    """
    Funci√≥n principal para ejecutar la configuraci√≥n de √≠ndices √∫nicos.
    """
    parser = argparse.ArgumentParser(description="Configurar √≠ndices √∫nicos para topic_contents")
    parser.add_argument("--dry-run", action="store_true", help="Solo verificar duplicados, no crear √≠ndices")
    parser.add_argument("--skip-tests", action="store_true", help="No ejecutar pruebas de constraints")
    parser.add_argument("--force", action="store_true", help="Continuar incluso si hay duplicados")
    parser.add_argument("--drop-existing", action="store_true", help="Eliminar √≠ndices existentes antes de crear")
    
    args = parser.parse_args()
    
    print("üéØ Configurando √çndices √önicos para Topic Contents")
    print("   Garantiza integridad de slides y quiz en el sistema de contenido de temas")
    print("=" * 70)
    
    try:
        # Paso 1: Verificar duplicados
        puede_continuar, reporte = check_for_duplicates()
        
        if not puede_continuar and not args.force and not args.dry_run:
            print("\n‚ùå Abortando debido a duplicados existentes. Use --force para continuar.")
            sys.exit(1)
        
        if args.dry_run:
            print("\nüîç Modo dry-run: Solo verificaci√≥n completada.")
            return
        
        # Paso 2: Crear √≠ndices
        indexes_created = create_topic_content_unique_indexes(args.drop_existing)
        
        # Paso 3: Verificar √≠ndices
        verificacion_ok = verify_unique_indexes()
        
        # Paso 4: Probar constraints (opcional)
        if not args.skip_tests:
            tests_ok, mensajes_tests = test_index_constraints()
        else:
            tests_ok = None
            mensajes_tests = []

        # Paso 5: Validar uso de √≠ndices con explain()
        explain_ok = validate_index_usage_with_explain()

        # Resumen final
        print("\n" + "=" * 70)
        print("‚ú® Configuraci√≥n completada!")
        print("üìä Resumen:")
        print(f"   - √çndices √∫nicos creados: {indexes_created}")
        print(f"   - Verificaci√≥n: {'‚úÖ Exitosa' if verificacion_ok else '‚ùå Fallida'}")
        if tests_ok is not None:
            print(f"   - Pruebas: {'‚úÖ ' + str(len([m for m in mensajes_tests if 'PAS√ì' in m])) + '/' + str(len(mensajes_tests)) + ' pasadas' if tests_ok else '‚ùå Fallidas'}")
        print(f"   - Uso de √≠ndices (explain): {'‚úÖ Optimizado' if explain_ok else '‚ùå Sub√≥ptimo'}")
        
        print("\nüí° Recomendaciones:")
        print("   - Los √≠ndices garantizan que operaciones de upsert en slides sean idempotentes")
        print("   - Solo puede existir un quiz por topic a nivel de base de datos")
        print("   - El √≠ndice de slides usa (topic_id, order) como √≠ndice √∫nico parcial con filtro content_type='slide'")
        print("   - Monitorear logs de aplicaci√≥n para errores de violaci√≥n de √≠ndice √∫nico")
        
        if not verificacion_ok:
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Interrumpido por usuario")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Error durante la configuraci√≥n: {str(e)}")
        print(f"\n‚ùå Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()